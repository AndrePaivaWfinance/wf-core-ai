# ================================================
# DOCKER COMPOSE - MESH PLATFORM OTIMIZADO
# ================================================
# Para desenvolvimento e produção
# Versão: 2.1.0

version: '3.8'

services:
  # ================================================
  # MESH BOT - SERVIÇO PRINCIPAL
  # ================================================
  mesh-platform:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-development}
    container_name: mesh-platform-2.1
    restart: unless-stopped
    
    # Portas
    ports:
      - "${PORT:-3978}:3978"
    
    # Variáveis de ambiente
    environment:
      # Configuração básica
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3978
      
      # Bot Framework
      MICROSOFT_APP_ID: ${MICROSOFT_APP_ID:-}
      MICROSOFT_APP_PASSWORD: ${MICROSOFT_APP_PASSWORD:-}
      MICROSOFT_APP_TYPE: ${MICROSOFT_APP_TYPE:-SingleTenant}
      MICROSOFT_APP_TENANT_ID: ${MICROSOFT_APP_TENANT_ID:-}
      
      # Azure OpenAI
      AZURE_OPENAI_ENDPOINT: ${AZURE_OPENAI_ENDPOINT:-}
      AZURE_OPENAI_API_KEY: ${AZURE_OPENAI_API_KEY:-}
      AZURE_OPENAI_DEPLOYMENT: ${AZURE_OPENAI_DEPLOYMENT:-}
      AZURE_OPENAI_API_VERSION: ${AZURE_OPENAI_API_VERSION:-2024-06-01}
      
      # OpenAI (fallback)
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4o-mini}
      
      # Application Insights
      APPLICATIONINSIGHTS_CONNECTION_STRING: ${APPLICATIONINSIGHTS_CONNECTION_STRING:-}
      
      # Azure Services (futuros)
      AZURE_COSMOS_ENDPOINT: ${AZURE_COSMOS_ENDPOINT:-}
      AZURE_COSMOS_KEY: ${AZURE_COSMOS_KEY:-}
      AZURE_STORAGE_CONNECTION_STRING: ${AZURE_STORAGE_CONNECTION_STRING:-}
      
      # Configurações MESH
      ENABLE_DEBUG_LOGS: ${ENABLE_DEBUG_LOGS:-true}
      ENABLE_MEMORY_CACHE: ${ENABLE_MEMORY_CACHE:-true}
      MESH_PERSONALITY_ENABLED: ${MESH_PERSONALITY_ENABLED:-true}
      
      # Performance
      NODE_OPTIONS: "--max-old-space-size=512 --enable-source-maps"
    
    # Volumes para desenvolvimento
    volumes:
      - ./src:/app/src:ro
      - ./package.json:/app/package.json:ro
      - mesh-logs:/app/logs
      - mesh-cache:/app/cache
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3978/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Recursos
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    
    # Dependências (quando houver)
    depends_on:
      - mesh-redis
    
    # Networks
    networks:
      - mesh-network

  # ================================================
  # REDIS - CACHE E SESSÕES
  # ================================================
  mesh-redis:
    image: redis:7-alpine
    container_name: mesh-redis
    restart: unless-stopped
    
    ports:
      - "6379:6379"
    
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-meshsecure123}
    
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD:-meshsecure123}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    
    volumes:
      - mesh-redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-meshsecure123}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    
    networks:
      - mesh-network

  # ================================================
  # NGINX - PROXY REVERSO (OPCIONAL)
  # ================================================
  mesh-nginx:
    image: nginx:alpine
    container_name: mesh-nginx
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - mesh-logs:/var/log/nginx
    
    depends_on:
      - mesh-platform
    
    networks:
      - mesh-network
    
    profiles:
      - production

  # ================================================
  # MONITORING - PROMETHEUS (OPCIONAL)
  # ================================================
  mesh-monitoring:
    image: prom/prometheus:latest
    container_name: mesh-prometheus
    restart: unless-stopped
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - mesh-prometheus-data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    networks:
      - mesh-network
    
    profiles:
      - monitoring

# ================================================
# VOLUMES PERSISTENTES
# ================================================
volumes:
  mesh-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs
  
  mesh-cache:
    driver: local
  
  mesh-redis-data:
    driver: local
  
  mesh-prometheus-data:
    driver: local

# ================================================
# NETWORKS
# ================================================
networks:
  mesh-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ================================================
# CONFIGURAÇÕES ESPECÍFICAS POR AMBIENTE
# ================================================
# Para usar:
# docker-compose -f docker-compose.optimized.yml up -d                    # Básico
# docker-compose -f docker-compose.optimized.yml --profile production up # Com Nginx
# docker-compose -f docker-compose.optimized.yml --profile monitoring up # Com monitoramento